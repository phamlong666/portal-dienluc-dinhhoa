import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
import os # Import os module to handle file paths
import matplotlib.pyplot as plt # Needed for the matplotlib charts from app moi.py
from datetime import datetime # Needed for year selection from app moi.py

st.set_page_config(page_title="B√°o c√°o t·ªïn th·∫•t TBA", layout="wide")
st.title("üì• AI_Tr·ª£ l√Ω t·ªïn th·∫•t")

st.markdown("### üîç Ch·ªçn lo·∫°i d·ªØ li·ªáu t·ªïn th·∫•t ƒë·ªÉ t·∫£i l√™n:")

# --- Kh·ªüi t·∫°o Session State cho d·ªØ li·ªáu t·∫£i l√™n ---
if 'df_tba_thang' not in st.session_state:
    st.session_state.df_tba_thang = None
if 'df_tba_luyke' not in st.session_state:
    st.session_state.df_tba_luyke = None
if 'df_tba_ck' not in st.session_state:
    st.session_state.df_tba_ck = None
if 'df_ha_thang' not in st.session_state:
    st.session_state.df_ha_thang = None
if 'df_ha_luyke' not in st.session_state:
    st.session_state.df_ha_luyke = None
if 'df_ha_ck' not in st.session_state:
    st.session_state.df_ha_ck = None
if 'df_trung_thang_tt' not in st.session_state:
    st.session_state.df_trung_thang_tt = None
if 'df_trung_luyke_tt' not in st.session_state:
    st.session_state.df_trung_ck_tt = None # This also seems like a typo, should be df_trung_luyke_tt
if 'df_trung_thang_dy' not in st.session_state:
    st.session_state.df_trung_thang_dy = None
if 'df_trung_luyke_dy' not in st.session_state:
    st.session_state.df_trung_luyke_dy = None
if 'df_trung_ck_dy' not in st.session_state:
    st.session_state.df_trung_ck_dy = None
if 'df_dv_thang' not in st.session_state:
    st.session_state.df_dv_thang = None
if 'df_dv_luyke' not in st.session_state:
    st.session_state.df_dv_luyke = None
if 'df_dv_ck' not in st.session_state:
    st.session_state.df_dv_ck = None


# H√†m ph√¢n lo·∫°i t·ªïn th·∫•t theo ng∆∞·ª°ng
def phan_loai_nghiem(x):
    try:
        x = float(str(x).replace(",", "."))
    except (ValueError, AttributeError):
        return "Kh√¥ng r√µ"
    if x < 2:
        return "<2%"
    elif 2 <= x < 3:
        return ">=2 v√† <3%"
    elif 3 <= x < 4:
        return ">=3 v√† <4%"
    elif 4 <= x < 5:
        return ">=4 v√† <5%"
    elif 5 <= x < 7:
        return ">=5 v√† <7%"
    else:
        return ">=7%"

# H√†m x·ª≠ l√Ω DataFrame v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng
def process_tba_data(df):
    if df is None:
        return None, None
    df_temp = pd.DataFrame()

    # ∆Øu ti√™n t√¨m c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' theo t√™n
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' (v√≠ d·ª• t·ª´ file m·∫´u)
    # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, ki·ªÉm tra ch·ªâ s·ªë c·ªôt 14 nh∆∞ fallback cu·ªëi c√πng
    loss_rate_col_found = False
    if 'T·ª∑ l·ªá t·ªïn th·∫•t' in df.columns:
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df['T·ª∑ l·ªá t·ªïn th·∫•t'].map(lambda x: float(str(x).replace(",", ".")) if pd.notna(x) else np.nan)
        loss_rate_col_found = True
    elif 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' in df.columns: # Gi·∫£ ƒë·ªãnh m·ªôt t√™n c·ªôt kh√°c c√≥ th·ªÉ c√≥
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df['T·ª∑ l·ªá t·ªïn th·∫•t (%)'].map(lambda x: float(str(x).replace(",", ".")) if pd.notna(x) else np.nan)
        loss_rate_col_found = True
    elif df.shape[1] > 14: # fallback to index 14 (15th column)
        # C·∫£nh b√°o: S·ª≠ d·ª•ng iloc c√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh n·∫øu th·ª© t·ª± c·ªôt thay ƒë·ªïi
        # st.warning("C·∫£nh b√°o: C·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' kh√¥ng t√¨m th·∫•y theo t√™n. ƒêang s·ª≠ d·ª•ng c·ªôt th·ª© 15 (ch·ªâ s·ªë 14) l√†m 'T·ª∑ l·ªá t·ªïn th·∫•t'. Vui l√≤ng ki·ªÉm tra file Excel ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c.")
        df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"] = df.iloc[:, 14].map(lambda x: float(str(x).replace(",", ".")) if pd.notna(x) else np.nan)
        loss_rate_col_found = True
    else:
        st.error("L·ªói: File Excel kh√¥ng c√≥ c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t' (theo t√™n ho·∫∑c theo ch·ªâ s·ªë 14). Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file v√† sheet 'd·ªØ li·ªáu' c·ªßa b·∫°n.")
        return None, None

    if not loss_rate_col_found:
        return None, None # Kh√¥ng c√≥ c·ªôt t·ª∑ l·ªá t·ªïn th·∫•t, kh√¥ng th·ªÉ x·ª≠ l√Ω

    df_temp["Ng∆∞·ª°ng"] = df_temp["T·ª∑ l·ªá t·ªïn th·∫•t"].apply(phan_loai_nghiem)
    tong_so = len(df_temp)
    tong_theo_nguong = df_temp["Ng∆∞·ª°ng"].value_counts().reindex(["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], fill_value=0)
    return tong_so, tong_theo_nguong, df_temp # Return df_temp as well for filtering later

# --- ƒê·∫∑t c√°c n√∫t "L√†m m·ªõi d·ªØ li·ªáu" v√† "T·∫£i file m·∫´u" c·∫°nh nhau ---
col_refresh, col_download_folder = st.columns([1, 1])

with col_refresh:
    if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
        st.session_state.df_tba_thang = None
        st.session_state.df_tba_luyke = None
        st.session_state.df_tba_ck = None
        st.session_state.df_ha_thang = None
        st.session_state.df_ha_luyke = None
        st.session_state.df_ha_ck = None
        st.session_state.df_trung_thang_tt = None
        st.session_state.df_trung_luyke_tt = None
        st.session_state.df_trung_ck_tt = None
        st.session_state.df_trung_thang_dy = None
        st.session_state.df_trung_luyke_dy = None
        st.session_state.df_trung_ck_dy = None
        st.session_state.df_dv_thang = None
        st.session_state.df_dv_luyke = None
        st.session_state.df_dv_ck = None
        st.experimental_rerun()

with col_download_folder:
    with st.expander("üìÅ T·∫£i file m·∫´u"):
        st.markdown("B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng c√°c file Excel m·∫´u d∆∞·ªõi ƒë√¢y ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi ch∆∞∆°ng tr√¨nh:")

        # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a file m·∫´u
        template_folder = "templates"

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c templates t·ªìn t·∫°i
        if not os.path.exists(template_folder):
            st.warning(f"Th∆∞ m·ª•c '{template_folder}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o th∆∞ m·ª•c n√†y v√† ƒë·∫∑t c√°c file m·∫´u v√†o ƒë√≥.")
        else:
            # L·∫∑p qua c√°c file trong th∆∞ m·ª•c templates v√† t·∫°o n√∫t download
            for filename in os.listdir(template_folder):
                if filename.endswith(".xlsx"): # Ch·ªâ hi·ªÉn th·ªã c√°c file Excel
                    file_path = os.path.join(template_folder, filename)
                    with open(file_path, "rb") as file:
                        st.download_button(
                            label=f"T·∫£i xu·ªëng {filename}",
                            data=file,
                            file_name=filename,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"download_{filename}"
                        )


# T·∫°o c√°c ti·ªán √≠ch con theo ph√¢n nh√≥m
with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    st.header("Upload d·ªØ li·ªáu")
    temp_upload_tba_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng", type=["xlsx"], key="tba_thang")
    if temp_upload_tba_thang:
        try:
            st.session_state.df_tba_thang = pd.read_excel(temp_upload_tba_thang, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_tba_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file: {e}")
            st.session_state.df_tba_thang = None


    temp_upload_tba_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - L≈©y k·∫ø", type=["xlsx"], key="tba_luyke")
    if temp_upload_tba_luyke:
        try:
            st.session_state.df_tba_luyke = pd.read_excel(temp_upload_tba_luyke, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet.")
            st.session_state.df_tba_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file L≈©y k·∫ø: {e}")
            st.session_state.df_tba_luyke = None

    temp_upload_tba_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA c√¥ng c·ªông - C√πng k·ª≥", type=["xlsx"], key="tba_ck")
    if temp_upload_tba_ck:
        try:
            st.session_state.df_tba_ck = pd.read_excel(temp_upload_tba_ck, sheet_name="d·ªØ li·ªáu")
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA c√¥ng c·ªông - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet.")
            st.session_state.df_tba_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file C√πng k·ª≥: {e}")
            st.session_state.df_tba_ck = None


    # --- X·ª≠ l√Ω v√† hi·ªÉn th·ªã d·ªØ li·ªáu t·ªïng h·ª£p n·∫øu c√≥ √≠t nh·∫•t m·ªôt file ƒë∆∞·ª£c t·∫£i l√™n ---
    if st.session_state.df_tba_thang is not None or \
       st.session_state.df_tba_luyke is not None or \
       st.session_state.df_tba_ck is not None:

        st.markdown("### üìä K·∫øt qu·∫£ √°nh x·∫° d·ªØ li·ªáu:")

        # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ng lo·∫°i v√† chu·∫©n b·ªã cho bi·ªÉu ƒë·ªì
        tong_so_thang, tong_theo_nguong_thang, df_thang_processed = process_tba_data(st.session_state.df_tba_thang)
        tong_so_luyke, tong_theo_nguong_luyke, df_luyke_processed = process_tba_data(st.session_state.df_tba_luyke)
        tong_so_ck, tong_theo_nguong_ck, df_ck_processed = process_tba_data(st.session_state.df_tba_ck)

        # Combine dataframes for analysis if they exist
        combined_df = pd.DataFrame()
        if df_thang_processed is not None:
            df_thang_processed['K·ª≥'] = 'Theo th√°ng'
            combined_df = pd.concat([combined_df, df_thang_processed.copy()]) # Use .copy() to avoid SettingWithCopyWarning

        if df_luyke_processed is not None:
            df_luyke_processed['K·ª≥'] = 'L≈©y k·∫ø'
            combined_df = pd.concat([combined_df, df_luyke_processed.copy()])

        if df_ck_processed is not None:
            df_ck_processed['K·ª≥'] = 'C√πng k·ª≥'
            combined_df = pd.concat([combined_df, df_ck_processed.copy()])
        
        # Ensure 'T√™n TBA' exists for dropping duplicates in combined_df
        # This part assumes 'T√™n TBA' exists in the original df_tba_thang etc.
        # If not, it needs to be added in process_tba_data or here
        if "T√™n TBA" in st.session_state.df_tba_thang.columns if st.session_state.df_tba_thang is not None else False:
            if df_thang_processed is not None:
                df_thang_processed["T√™n TBA"] = st.session_state.df_tba_thang["T√™n TBA"]
            if df_luyke_processed is not None:
                df_luyke_processed["T√™n TBA"] = st.session_state.df_tba_luyke["T√™n TBA"]
            if df_ck_processed is not None:
                df_ck_processed["T√™n TBA"] = st.session_state.df_tba_ck["T√™n TBA"]
        
        # Recombine after adding 'T√™n TBA'
        combined_df = pd.DataFrame()
        if df_thang_processed is not None:
            df_thang_processed['K·ª≥'] = 'Theo th√°ng'
            combined_df = pd.concat([combined_df, df_thang_processed])

        if df_luyke_processed is not None:
            df_luyke_processed['K·ª≥'] = 'L≈©y k·∫ø'
            combined_df = pd.concat([combined_df, df_luyke_processed])

        if df_ck_processed is not None:
            df_ck_processed['K·ª≥'] = 'C√πng k·ª≥'
            combined_df = pd.concat([combined_df, df_ck_processed])

        # Analysis section from app moi.py
        st.markdown("---")
        st.header("üìä Ph√¢n t√≠ch t·ªïn th·∫•t c√°c TBA c√¥ng c·ªông")

        if not combined_df.empty:
            # Reclassify 'Ng∆∞·ª°ng t·ªïn th·∫•t' for consistency with app moi.py naming
            # The phan_loai_nghiem function is already defined and used by process_tba_data
            # so df_temp['Ng∆∞·ª°ng'] is already set. Let's rename it for consistency.
            if "Ng∆∞·ª°ng" in combined_df.columns:
                combined_df.rename(columns={"Ng∆∞·ª°ng": "Ng∆∞·ª°ng t·ªïn th·∫•t"}, inplace=True)
            else: # If 'Ng∆∞·ª°ng' not found, re-apply classification based on 'T·ª∑ l·ªá t·ªïn th·∫•t'
                combined_df["Ng∆∞·ª°ng t·ªïn th·∫•t"] = combined_df["T·ª∑ l·ªá t·ªïn th·∫•t"].apply(phan_loai_nghiem)
            
            # Use 'K·ª≥' column directly from combined_df
            df_unique = combined_df.drop_duplicates(subset=["T√™n TBA", "K·ª≥"]) if "T√™n TBA" in combined_df.columns else combined_df.drop_duplicates(subset=["K·ª≥"])


            count_df = df_unique.groupby(["Ng∆∞·ª°ng t·ªïn th·∫•t", "K·ª≥"]).size().reset_index(name="S·ªë l∆∞·ª£ng")
            
            # Use a simpler pivot table as the original app.py already has separate dfs for month/luyke/ck
            # The original app.py generates its own charts from separate processed dataframes.
            # We need to adapt this part to use the combined_df for a single matplotlib chart.

            # We need to decide which 'mode' (Theo th√°ng, L≈©y k·∫ø, C√πng k·ª≥) to show in the detailed plot.
            # Let's use the 'Theo th√°ng' as the default for the detailed list, or combined if applicable.

            # Plotly charts as per original app.py for comparison
            col1, col2 = st.columns([2,2])

            with col1:
                st.markdown("#### üìä S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")
                fig_bar = go.Figure()
                colors_plotly = ['steelblue', 'darkorange', 'forestgreen', 'goldenrod', 'teal', 'red'] # M√†u s·∫Øc cho t·ª´ng ng∆∞·ª°ng

                # Th√™m c√°c thanh cho "Theo th√°ng"
                if tong_theo_nguong_thang is not None:
                    fig_bar.add_trace(go.Bar(
                        name='Theo th√°ng',
                        x=tong_theo_nguong_thang.index,
                        y=tong_theo_nguong_thang.values,
                        text=tong_theo_nguong_thang.values,
                        textposition='outside',
                        textfont=dict(color='black', size=13, family='Arial')
                    ))

                # Th√™m c√°c thanh cho "L≈©y k·∫ø"
                if tong_theo_nguong_luyke is not None:
                    fig_bar.add_trace(go.Bar(
                        name='L≈©y k·∫ø',
                        x=tong_theo_nguong_luyke.index,
                        y=tong_theo_nguong_luyke.values,
                        text=tong_theo_nguong_luyke.values,
                        textposition='outside',
                        textfont=dict(color='black', size=13, family='Arial')
                    ))

                # Th√™m c√°c thanh cho "C√πng k·ª≥"
                if tong_theo_nguong_ck is not None:
                    fig_bar.add_trace(go.Bar(
                        name='C√πng k·ª≥',
                        x=tong_theo_nguong_ck.index,
                        y=tong_theo_nguong_ck.values,
                        text=tong_theo_nguong_ck.values,
                        textposition='outside',
                        textfont=dict(color='black', size=13, family='Arial')
                    ))

                fig_bar.update_layout(
            xaxis=dict(title_font=dict(color='black', size=14, family='Arial',), tickfont=dict(color='black', size=13, family='Arial')),
            yaxis=dict(title_font=dict(color='black', size=14, family='Arial'), tickfont=dict(color='black', size=13, family='Arial')),
                    barmode='group',
                    height=400,
                    xaxis_title='Ng∆∞·ª°ng t·ªïn th·∫•t',
                    yaxis_title='S·ªë l∆∞·ª£ng TBA',
                    margin=dict(l=20, r=20, t=40, b=40),
                    legend_title_text='Lo·∫°i d·ªØ li·ªáu'
                )
                st.plotly_chart(fig_bar, use_container_width=True)

            with col2:
                st.markdown("#### üß© T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t")

                if tong_theo_nguong_thang is not None:
                    st.markdown(f"##### Theo th√°ng (T·ªïng s·ªë: {tong_so_thang})")
                    fig_pie_thang = go.Figure(data=[
                        go.Pie(
                            labels=tong_theo_nguong_thang.index,
                            values=tong_theo_nguong_thang.values,
                            hole=0.5,
                            marker=dict(colors=colors_plotly),
                            textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                            name='Theo th√°ng'
                        )
                    ])
                    fig_pie_thang.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
                    st.plotly_chart(fig_pie_thang, use_container_width=True)

                if tong_theo_nguong_luyke is not None:
                    st.markdown(f"##### L≈©y k·∫ø (T·ªïng s·ªë: {tong_so_luyke})")
                    fig_pie_luyke = go.Figure(data=[
                        go.Pie(
                            labels=tong_theo_nguong_luyke.index,
                            values=tong_theo_nguong_luyke.values,
                            hole=0.5,
                            marker=dict(colors=colors_plotly),
                            textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                            name='L≈©y k·∫ø'
                        )
                    ])
                    fig_pie_luyke.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
                    st.plotly_chart(fig_pie_luyke, use_container_width=True)

                if tong_theo_nguong_ck is not None:
                    st.markdown(f"##### C√πng k·ª≥ (T·ªïng s·ªë: {tong_so_ck})")
                    fig_pie_ck = go.Figure(data=[
                        go.Pie(
                            labels=tong_theo_nguong_ck.index,
                            values=tong_theo_nguong_ck.values,
                            hole=0.5,
                            marker=dict(colors=colors_plotly),
                            textinfo='percent+label', textfont=dict(color='black', size=13, family='Arial'),
                            name='C√πng k·ª≥'
                        )
                    ])
                    fig_pie_ck.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=40), showlegend=False)
                    st.plotly_chart(fig_pie_ck, use_container_width=True)

            # Matplotlib charts from app moi.py
            st.markdown("### üìà Bi·ªÉu ƒë·ªì t·ªïng h·ª£p c√°c k·ª≥")
            # Create a pivot table for the matplotlib chart
            pivot_df_mpl = count_df.pivot(index="Ng∆∞·ª°ng t·ªïn th·∫•t", columns="K·ª≥", values="S·ªë l∆∞·ª£ng").fillna(0).astype(int)
            pivot_df_mpl = pivot_df_mpl.reindex(["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"])

            fig_mpl, (ax_bar_mpl, ax_pie_mpl) = plt.subplots(1, 2, figsize=(10, 3), dpi=300)

            x_mpl = range(len(pivot_df_mpl))
            width_mpl = 0.25 # Adjusted width for possibly more bars
            colors_mpl = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'] # Consistent colors

            for i, col in enumerate(pivot_df_mpl.columns):
                offset = (i - (len(pivot_df_mpl.columns)-1)/2) * width_mpl
                bars = ax_bar_mpl.bar([xi + offset for xi in x_mpl], pivot_df_mpl[col], width_mpl, label=col, color=colors_mpl[i % len(colors_mpl)])
                for bar in bars:
                    height = bar.get_height()
                    if height > 0:
                        ax_bar_mpl.text(bar.get_x() + bar.get_width()/2, height + 0.5, f'{int(height)}', ha='center', va='bottom', fontsize=5, fontweight='bold', color='black')

            ax_bar_mpl.set_ylabel("S·ªë l∆∞·ª£ng", fontsize=5)
            ax_bar_mpl.set_title("S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t (T·ªïng h·ª£p)", fontsize=6, weight='bold')
            ax_bar_mpl.set_xticks(list(x_mpl))
            ax_bar_mpl.set_xticklabels(pivot_df_mpl.index, fontsize=5)
            ax_bar_mpl.tick_params(axis='y', labelsize=5)
            ax_bar_mpl.legend(title="K·ª≥", fontsize=5)
            ax_bar_mpl.grid(axis='y', linestyle='--', linewidth=0.5)

            # For the pie chart, we'll use the 'Theo th√°ng' data if available, or the first available data.
            pie_data_mpl = None
            if 'Theo th√°ng' in pivot_df_mpl.columns:
                pie_data_mpl = pivot_df_mpl['Theo th√°ng']
            elif not pivot_df_mpl.empty:
                pie_data_mpl = pivot_df_mpl.iloc[:, 0] # Use the first column if 'Theo th√°ng' isn't there

            if pie_data_mpl is not None and pie_data_mpl.sum() > 0:
                wedges, texts, autotexts = ax_pie_mpl.pie(
                    pie_data_mpl,
                    labels=pivot_df_mpl.index,
                    autopct='%1.1f%%',
                    startangle=90,
                    colors=colors_mpl,
                    pctdistance=0.75,
                    wedgeprops={'width': 0.3, 'edgecolor': 'w'}
                )

                for text in texts:
                    text.set_fontsize(4)
                    text.set_fontweight('bold')
                for autotext in autotexts:
                    autotext.set_color('black')
                    autotext.set_fontsize(4)
                    autotext.set_fontweight('bold')

                ax_pie_mpl.text(0, 0, f"T·ªïng s·ªë TBA\n{pie_data_mpl.sum()}", ha='center', va='center', fontsize=5, fontweight='bold', color='black')
                ax_pie_mpl.set_title("T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t (Theo th√°ng)", fontsize=6, weight='bold')
            else:
                ax_pie_mpl.text(0.5, 0.5, "Kh√¥ng c√≥ d·ªØ li·ªáu pie chart", horizontalalignment='center', verticalalignment='center', transform=ax_pie_mpl.transAxes, fontsize=6)
                ax_pie_mpl.set_title("T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t", fontsize=6, weight='bold')

            st.pyplot(fig_mpl)


        # Display mapped DataFrame for "Theo th√°ng" file (original app.py logic)
        if st.session_state.df_tba_thang is not None:
            st.markdown("##### D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng:")
            df_test = st.session_state.df_tba_thang
            df_result = pd.DataFrame()

            expected_cols = {
                "T√™n TBA": "T√™n TBA",
                "C√¥ng su·∫•t": "C√¥ng su·∫•t",
                "ƒêi·ªán nh·∫≠n": "ƒêi·ªán nh·∫≠n",
                "ƒêi·ªán th∆∞∆°ng ph·∫©m": "ƒêi·ªán th∆∞∆°ng ph·∫©m",
                "ƒêi·ªán t·ªïn th·∫•t": "ƒêi·ªán t·ªïn th·∫•t",
                "T·ª∑ l·ªá t·ªïn th·∫•t": "T·ª∑ l·ªá t·ªïn th·∫•t", # or 'T·ª∑ l·ªá t·ªïn th·∫•t (%)'
                "K·∫ø ho·∫°ch": "K·∫ø ho·∫°ch",
                "So s√°nh": "So s√°nh"
            }

            missing_cols = [col_name for df_col_name, col_name in expected_cols.items() if col_name not in df_test.columns]

            if 'T·ª∑ l·ªá t·ªïn th·∫•t' not in df_test.columns and 'T·ª∑ l·ªá t·ªïn th·∫•t (%)' in df_test.columns:
                expected_cols['T·ª∑ l·ªá t·ªïn th·∫•t'] = 'T·ª∑ l·ªá t·ªïn th·∫•t (%)'
                missing_cols = [col_name for df_col_name, col_name in expected_cols.items() if col_name not in df_test.columns]


            if missing_cols:
                st.warning(f"D·ªØ li·ªáu TBA c√¥ng c·ªông - Theo th√°ng: Thi·∫øu c√°c c·ªôt sau ƒë·ªÉ √°nh x·∫°: {', '.join(missing_cols)}. Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c sheet 'd·ªØ li·ªáu'.")
            else:
                try:
                    df_result["STT"] = range(1, len(df_test) + 1)
                    df_result["T√™n TBA"] = df_test[expected_cols["T√™n TBA"]]
                    df_result["C√¥ng su·∫•t"] = df_test[expected_cols["C√¥ng su·∫•t"]]
                    df_result["ƒêi·ªán nh·∫≠n"] = df_test[expected_cols["ƒêi·ªán nh·∫≠n"]]

                    if expected_cols["ƒêi·ªán nh·∫≠n"] in df_test.columns and expected_cols["ƒêi·ªán th∆∞∆°ng ph·∫©m"] in df_test.columns:
                         df_result["Th∆∞∆°ng ph·∫©m"] = df_test[expected_cols["ƒêi·ªán nh·∫≠n"]] - df_test[expected_cols["ƒêi·ªán th∆∞∆°ng ph·∫©m"]]
                    else:
                        df_result["Th∆∞∆°ng ph·∫©m"] = np.nan
                        st.warning("Kh√¥ng ƒë·ªß c·ªôt ƒë·ªÉ t√≠nh Th∆∞∆°ng ph·∫©m. ƒê·∫£m b·∫£o c√≥ c·ªôt 'ƒêi·ªán nh·∫≠n' v√† 'ƒêi·ªán th∆∞∆°ng ph·∫©m'.")

                    df_result["ƒêi·ªán t·ªïn th·∫•t"] = df_test[expected_cols["ƒêi·ªán t·ªïn th·∫•t"]].round(0).astype("Int64", errors='ignore')
                    # Ensure 'T·ª∑ l·ªá t·ªïn th·∫•t' is correctly converted for display
                    df_result["T·ª∑ l·ªá t·ªïn th·∫•t"] = df_test[expected_cols["T·ª∑ l·ªá t·ªïn th·∫•t"]].map(lambda x: f"{float(str(x).replace(',', '.')):.2f}".replace(".", ",") if pd.notna(x) else "")
                    df_result["K·∫ø ho·∫°ch"] = df_test[expected_cols["K·∫ø ho·∫°ch"]].map(lambda x: f"{float(str(x).replace(',', '.')):.2f}".replace(".", ",") if pd.notna(x) else "")
                    df_result["So s√°nh"] = df_test[expected_cols["So s√°nh"]].map(lambda x: f"{float(str(x).replace(',', '.')):.2f}".replace(".", ",") if pd.notna(x) else "")
                    
                    # Apply phan_loai_nghiem on the *numeric* 'T·ª∑ l·ªá t·ªïn th·∫•t' before mapping to string
                    df_result["Ng∆∞·ª°ng"] = df_test[expected_cols["T·ª∑ l·ªá t·ªïn th·∫•t"]].apply(phan_loai_nghiem)
                    nguong_options = ["T·∫•t c·∫£", "<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"]
                    
                    chon_nguong = st.selectbox("üéØ L·ªçc theo ng∆∞·ª°ng t·ªïn th·∫•t:", nguong_options, key="tba_thang_nguong_filter")
                    
                    if chon_nguong != "T·∫•t c·∫£":
                        df_result = df_result[df_result["Ng∆∞·ª°ng"] == chon_nguong]
                    
                    df_result["Ng∆∞·ª°ng"] = pd.Categorical(df_result["Ng∆∞·ª°ng"], categories=["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], ordered=True)

                    st.dataframe(df_result, use_container_width=True)
                except KeyError as e:
                    st.error(f"L·ªói khi √°nh x·∫° d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt '{e}'. Vui l√≤ng ki·ªÉm tra t√™n c·ªôt trong file Excel c·ªßa b·∫°n tr√™n sheet 'd·ªØ li·ªáu'.")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi hi·ªÉn th·ªã DataFrame: {e}")
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu TBA c√¥ng c·ªông ƒë∆∞·ª£c t·∫£i l√™n ƒë·ªÉ ph√¢n t√≠ch.")


with st.expander("‚ö° T·ªïn th·∫•t h·∫° th·∫ø"):
    upload_ha_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu h·∫° √°p - Theo th√°ng", type=["xlsx"], key="ha_thang")
    if upload_ha_thang:
        try:
            st.session_state.df_ha_thang = pd.read_excel(upload_ha_thang, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p theo th√°ng: {e}")
            st.session_state.df_ha_thang = None

    upload_ha_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu h·∫° √°p - L≈©y k·∫ø", type=["xlsx"], key="ha_luyke")
    if upload_ha_luyke:
        try:
            st.session_state.df_ha_luyke = pd.read_excel(upload_ha_luyke, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p l≈©y k·∫ø: {e}")
            st.session_state.df_ha_luyke = None

    upload_ha_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu h·∫° √°p - C√πng k·ª≥", type=["xlsx"], key="ha_ck")
    if upload_ha_ck:
        try:
            st.session_state.df_ha_ck = pd.read_excel(upload_ha_ck, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t h·∫° √°p - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet h·∫° √°p c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_ha_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file h·∫° √°p c√πng k·ª≥: {e}")
            st.session_state.df_ha_ck = None


with st.expander("‚ö° T·ªïn th·∫•t trung th·∫ø (TBA Trung th·∫ø)"): # ƒê·ªïi t√™n hi·ªÉn th·ªã cho r√µ r√†ng
    upload_trung_thang_tt = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu TBA Trung √°p - Theo th√°ng", type=["xlsx"], key="trung_thang_tt")
    if upload_trung_thang_tt:
        try:
            st.session_state.df_trung_thang_tt = pd.read_excel(upload_trung_thang_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_thang_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) theo th√°ng: {e}")
            st.session_state.df_trung_thang_tt = None

    upload_trung_luyke_tt = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu TBA Trung √°p - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_tt")
    if upload_trung_luyke_tt:
        try:
            st.session_state.df_trung_luyke_tt = pd.read_excel(upload_trung_luyke_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_luyke_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) l≈©y k·∫ø: {e}")
            st.session_state.df_trung_luyke_tt = None

    upload_trung_ck_tt = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu TBA Trung √°p - C√πng k·ª≥", type=["xlsx"], key="trung_ck_tt")
    if upload_trung_ck_tt:
        try:
            st.session_state.df_trung_ck_tt = pd.read_excel(upload_trung_ck_tt, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t TBA Trung √°p (Trung th·∫ø) - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet trung √°p (TT) c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_ck_tt = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file trung √°p (TT) c√πng k·ª≥: {e}")
            st.session_state.df_trung_ck_tt = None


with st.expander("‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø"):
    upload_trung_thang_dy = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - Theo th√°ng", type=["xlsx"], key="trung_thang_dy")
    if upload_trung_thang_dy:
        try:
            st.session_state.df_trung_thang_dy = pd.read_excel(upload_trung_thang_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_thang_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø theo th√°ng: {e}")
            st.session_state.df_trung_thang_dy = None

    upload_trung_luyke_dy = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - L≈©y k·∫ø", type=["xlsx"], key="trung_luyke_dy")
    if upload_trung_luyke_dy:
        try:
            st.session_state.df_trung_luyke_dy = pd.read_excel(upload_trung_luyke_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_luyke_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø l≈©y k·∫ø: {e}")
            st.session_state.df_trung_luyke_dy = None

    upload_trung_ck_dy = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu ƒê∆∞·ªùng d√¢y Trung th·∫ø - C√πng k·ª≥", type=["xlsx"], key="trung_ck_dy")
    if upload_trung_ck_dy:
        try:
            st.session_state.df_trung_ck_dy = pd.read_excel(upload_trung_ck_dy, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆∞·ªùng d√¢y trung th·∫ø c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_trung_ck_dy = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆∞·ªùng d√¢y trung th·∫ø c√πng k·ª≥: {e}")
            st.session_state.df_trung_ck_dy = None


with st.expander("üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã"):
    upload_dv_thang = st.file_uploader("üìÖ T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - Theo th√°ng", type=["xlsx"], key="dv_thang")
    if upload_dv_thang:
        try:
            st.session_state.df_dv_thang = pd.read_excel(upload_dv_thang, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - Theo th√°ng!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã theo th√°ng: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_thang = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã theo th√°ng: {e}")
            st.session_state.df_dv_thang = None

    upload_dv_luyke = st.file_uploader("üìä T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - L≈©y k·∫ø", type=["xlsx"], key="dv_luyke")
    if upload_dv_luyke:
        try:
            st.session_state.df_dv_luyke = pd.read_excel(upload_dv_luyke, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - L≈©y k·∫ø!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã l≈©y k·∫ø: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_luyke = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã l≈©y k·∫ø: {e}")
            st.session_state.df_dv_luyke = None

    upload_dv_ck = st.file_uploader("üìà T·∫£i d·ªØ li·ªáu ƒê∆°n v·ªã - C√πng k·ª≥", type=["xlsx"], key="dv_ck")
    if upload_dv_ck:
        try:
            st.session_state.df_dv_ck = pd.read_excel(upload_dv_ck, sheet_name="d·ªØ li·ªáu", skiprows=6)
            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã - C√πng k·ª≥!")
        except ValueError as e:
            st.error(f"L·ªói khi ƒë·ªçc sheet ƒë∆°n v·ªã c√πng k·ª≥: {e}. Vui l√≤ng ki·ªÉm tra t√™n sheet trong file Excel.")
            st.session_state.df_dv_ck = None
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ƒë·ªçc file ƒë∆°n v·ªã c√πng k·ª≥: {e}")
            st.session_state.df_dv_ck = None