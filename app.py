import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import datetime
import io
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

st.set_page_config(layout="wide", page_title="B√°o c√°o t·ªïn th·∫•t TBA")
st.title("üì• AI_Tr·ª£ l√Ω t·ªïn th·∫•t")

# --- Kh·ªüi t·∫°o Session State cho d·ªØ li·ªáu (Gi·ªØ nguy√™n cho c√°c ph·∫ßn kh√°c) ---
if 'df_tba_thang' not in st.session_state:
    st.session_state.df_tba_thang = None
if 'df_tba_luyke' not in st.session_state:
    st.session_state.df_tba_luyke = None
if 'df_tba_ck' not in st.session_state:
    st.session_state.df_tba_ck = None
if 'df_ha_thang' not in st.session_state:
    st.session_state.df_ha_thang = None
if 'df_ha_luyke' not in st.session_state:
    st.session_state.df_ha_luyke = None
if 'df_ha_ck' not in st.session_state:
    st.session_state.df_ha_ck = None
if 'df_trung_thang_tt' not in st.session_state:
    st.session_state.df_trung_thang_tt = None
if 'df_trung_luyke_tt' not in st.session_state:
    st.session_state.df_trung_ck_tt = None
if 'df_trung_thang_dy' not in st.session_state:
    st.session_state.df_trung_thang_dy = None
if 'df_trung_luyke_dy' not in st.session_state:
    st.session_state.df_trung_luyke_dy = None
if 'df_trung_ck_dy' not in st.session_state:
    st.session_state.df_trung_ck_dy = None
if 'df_dv_thang' not in st.session_state:
    st.session_state.df_dv_thang = None
if 'df_dv_luyke' not in st.session_state:
    st.session_state.df_dv_luyke = None
if 'df_dv_ck' not in st.session_state:
    st.session_state.df_dv_ck = None


# --- Bi·∫øn v√† H√†m h·ªó tr·ª£ t·∫£i d·ªØ li·ªáu t·ª´ Google Drive (t·ª´ app moi.py) ---
FOLDER_ID = '165Txi8IyqG50uFSFHzWidSZSG9qpsbaq' # ID th∆∞ m·ª•c Google Drive ch·ª©a file Excel

@st.cache_data
def get_drive_service():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng d·ªãch v·ª• Google Drive."""
    try:
        credentials = service_account.Credentials.from_service_account_info(
            st.secrets["google"],
            scopes=["https://www.googleapis.com/auth/drive.readonly"] # Ch·ªâ c·∫ßn quy·ªÅn ƒë·ªçc
        )
        return build('drive', 'v3', credentials=credentials)
    except Exception as e:
        st.error(f"L·ªói khi x√°c th·ª±c Google Drive: {e}. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh `secrets.toml`.")
        return None

@st.cache_data
def list_excel_files():
    """Li·ªát k√™ c√°c file Excel trong th∆∞ m·ª•c Google Drive ƒë√£ cho."""
    service = get_drive_service()
    if not service:
        return {}
    query = f"'{FOLDER_ID}' in parents and mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
    try:
        results = service.files().list(q=query, fields="files(id, name)").execute()
        return {f['name']: f['id'] for f in results.get('files', [])}
    except Exception as e:
        st.error(f"L·ªói khi li·ªát k√™ file t·ª´ Google Drive: {e}. Vui l√≤ng ki·ªÉm tra ID th∆∞ m·ª•c v√† quy·ªÅn truy c·∫≠p.")
        return {}

@st.cache_data
def download_excel(file_id):
    """T·∫£i xu·ªëng file Excel t·ª´ Google Drive b·∫±ng ID file."""
    service = get_drive_service()
    if not service:
        return pd.DataFrame()
    try:
        request = service.files().get_media(fileId=file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()
            # st.progress(status.progress()) # C√≥ th·ªÉ th√™m thanh ti·∫øn tr√¨nh
        fh.seek(0)
        return pd.read_excel(fh, sheet_name=0)
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ t·∫£i xu·ªëng ho·∫∑c ƒë·ªçc file v·ªõi ID {file_id}. L·ªói: {e}. C√≥ th·ªÉ file kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng sheet 'd·ªØ li·ªáu'.")
        return pd.DataFrame()

def generate_filenames(year, start_month, end_month):
    """T·∫°o danh s√°ch t√™n file d·ª± ki·∫øn d·ª±a tr√™n nƒÉm v√† th√°ng."""
    return [f"TBA_{year}_{str(m).zfill(2)}.xlsx" for m in range(start_month, end_month + 1)]

def load_data(file_list, all_files, nhan="Th·ª±c hi·ªán"):
    """T·∫£i v√† n·ªëi c√°c DataFrame t·ª´ danh s√°ch file."""
    dfs = []
    for fname in file_list:
        file_id = all_files.get(fname)
        if file_id:
            df = download_excel(file_id)
            if not df.empty:
                df["K·ª≥"] = nhan
                dfs.append(df)
        else:
            st.info(f"Kh√¥ng t√¨m th·∫•y file: {fname}")
    return pd.concat(dfs) if dfs else pd.DataFrame()

def classify_nguong(x):
    """Ph√¢n lo·∫°i t·ª∑ l·ªá t·ªïn th·∫•t v√†o c√°c ng∆∞·ª°ng."""
    try:
        # Chuy·ªÉn ƒë·ªïi sang s·ªë n·∫øu c·∫ßn, x·ª≠ l√Ω d·∫•u ph·∫©y th√†nh d·∫•u ch·∫•m
        x = float(str(x).replace(",", "."))
    except (ValueError, TypeError):
        return "Kh√¥ng r√µ" # X·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng ph·∫£i s·ªë

    if x < 2: return "<2%"
    elif 2 <= x < 3: return ">=2 v√† <3%"
    elif 3 <= x < 4: return ">=3 v√† <4%"
    elif 4 <= x < 5: return ">=4 v√† <5%"
    elif 5 <= x < 7: return ">=5 v√† <7%"
    else: return ">=7%"


# --- C√°c n√∫t ƒëi·ªÅu h∆∞·ªõng ch√≠nh (Expander) ---

with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu TBA c√¥ng c·ªông")

    # To√†n b·ªô n·ªôi dung t·ª´ app moi.py ƒë∆∞·ª£c ch√®n v√†o ƒë√¢y
    col1, col2, col3 = st.columns(3)
    with col1:
        mode = st.radio("Ch·∫ø ƒë·ªô ph√¢n t√≠ch", ["Theo th√°ng", "L≈©y k·∫ø", "So s√°nh c√πng k·ª≥", "L≈©y k·∫ø c√πng k·ª≥"], key="tba_mode")
    with col2:
        thang_from = st.selectbox("T·ª´ th√°ng", list(range(1, 13)), index=0, key="tba_thang_from")
        # ƒê·∫£m b·∫£o thang_to kh√¥ng nh·ªè h∆°n thang_from
        thang_to_options = list(range(thang_from, 13))
        # ƒê·∫∑t index m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói khi thang_to_options r·ªóng
        default_index_thang_to = 0 if thang_to_options else None
        if "L≈©y k·∫ø" in mode:
            # Ch·ªçn index sao cho n√≥ kh√¥ng v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc c·ªßa list options
            # N·∫øu th√°ng 5 l√† index 4 trong list 1-12, khi range b·∫Øt ƒë·∫ßu t·ª´ 5, index 4 c√≥ th·ªÉ l√† th√°ng 9
            # C·ªë g·∫Øng gi·ªØ th√°ng 5 l√†m th√°ng cu·ªëi m·∫∑c ƒë·ªãnh n·∫øu c√≥ th·ªÉ
            if 5 in thang_to_options:
                default_index_thang_to = thang_to_options.index(5)
            elif len(thang_to_options) > 4: # Fallback n·∫øu 5 kh√¥ng c√≥, ch·ªçn th√°ng th·ª© 5 trong list m·ªõi
                 default_index_thang_to = 4
            else: # N·∫øu √≠t h∆°n 5 th√°ng, ch·ªçn th√°ng cu·ªëi c√πng
                 default_index_thang_to = len(thang_to_options) - 1 if thang_to_options else None

            thang_to = st.selectbox("ƒê·∫øn th√°ng", thang_to_options, index=default_index_thang_to, key="tba_thang_to")
        else:
            thang_to = thang_from # N·∫øu kh√¥ng ph·∫£i l≈©y k·∫ø, th√°ng ƒë·∫øn b·∫±ng th√°ng t·ª´

    with col3:
        nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0, key="tba_nam")
        nam_cungk·ª≥ = nam - 1 if "c√πng k·ª≥" in mode.lower() else None

    nguong_display = st.selectbox("Ng∆∞·ª°ng t·ªïn th·∫•t", ["(All)", "<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], key="tba_nguong_display")

    # T·∫£i d·ªØ li·ªáu t·ª´ Google Drive
    all_files = list_excel_files()

    files = generate_filenames(nam, thang_from, thang_to if "L≈©y k·∫ø" in mode or "c√πng k·ª≥" in mode.lower() else thang_from)
    df = load_data(files, all_files, "Th·ª±c hi·ªán")

    if "c√πng k·ª≥" in mode.lower() and nam_cungk·ª≥:
        files_ck = generate_filenames(nam_cungk·ª≥, thang_from, thang_to if "L≈©y k·∫ø" in mode or "c√πng k·ª≥" in mode.lower() else thang_from)
        df_ck = load_data(files_ck, all_files, "C√πng k·ª≥")
        if not df_ck.empty:
            # ƒê·∫£m b·∫£o c·ªôt "K·ª≥" l√† string ƒë·ªÉ c√≥ th·ªÉ concat
            df_ck["K·ª≥"] = "C√πng k·ª≥"
            df = pd.concat([df, df_ck])

    if not df.empty and "T·ª∑ l·ªá t·ªïn th·∫•t" in df.columns:
        # ƒê·∫£m b·∫£o c·ªôt T·ª∑ l·ªá t·ªïn th·∫•t l√† s·ªë ƒë·ªÉ apply classify_nguong
        df["T·ª∑ l·ªá t·ªïn th·∫•t"] = pd.to_numeric(df["T·ª∑ l·ªá t·ªïn th·∫•t"].astype(str).str.replace(',', '.'), errors='coerce')
        df["Ng∆∞·ª°ng t·ªïn th·∫•t"] = df["T·ª∑ l·ªá t·ªïn th·∫•t"].apply(classify_nguong)

        # Drop duplicates based on 'T√™n TBA' and 'K·ª≥' to count unique TBAs per period
        df_unique = df.drop_duplicates(subset=["T√™n TBA", "K·ª≥"])

        # Create count_df and pivot_df for plotting
        count_df = df_unique.groupby(["Ng∆∞·ª°ng t·ªïn th·∫•t", "K·ª≥"]).size().reset_index(name="S·ªë l∆∞·ª£ng")
        pivot_df = count_df.pivot(index="Ng∆∞·ª°ng t·ªïn th·∫•t", columns="K·ª≥", values="S·ªë l∆∞·ª£ng").fillna(0).astype(int)
        # S·∫Øp x·∫øp l·∫°i th·ª© t·ª± c√°c ng∆∞·ª°ng
        pivot_df = pivot_df.reindex(["<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"])

        # --- V·∫Ω bi·ªÉu ƒë·ªì ---
        fig, (ax_bar, ax_pie) = plt.subplots(1, 2, figsize=(10, 3), dpi=300)

        # Bi·ªÉu ƒë·ªì c·ªôt
        x = range(len(pivot_df))
        width = 0.35
        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'] # M√†u s·∫Øc cho c√°c c·ªôt
        for i, col in enumerate(pivot_df.columns):
            offset = (i - (len(pivot_df.columns)-1)/2) * width
            bars = ax_bar.bar([xi + offset for xi in x], pivot_df[col], width, label=col, color=colors[i % len(colors)])
            for bar in bars:
                height = bar.get_height()
                if height > 0:
                    ax_bar.text(bar.get_x() + bar.get_width()/2, height + 0.5, f'{int(height)}', ha='center', va='bottom', fontsize=5, fontweight='bold', color='black')

        ax_bar.set_ylabel("S·ªë l∆∞·ª£ng", fontsize=5)
        ax_bar.set_title("S·ªë l∆∞·ª£ng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t", fontsize=6, weight='bold')
        ax_bar.set_xticks(list(x))
        ax_bar.set_xticklabels(pivot_df.index, fontsize=5)
        ax_bar.tick_params(axis='y', labelsize=5)
        ax_bar.legend(title="K·ª≥", fontsize=5)
        ax_bar.grid(axis='y', linestyle='--', linewidth=0.5)

        # Bi·ªÉu ƒë·ªì tr√≤n (T·ª∑ tr·ªçng) - ∆Øu ti√™n d·ªØ li·ªáu 'Th·ª±c hi·ªán' ho·∫∑c k·ª≥ ƒë·∫ßu ti√™n n·∫øu kh√¥ng c√≥
        pie_data = pd.Series(0, index=pivot_df.index) # Default empty
        if 'Th·ª±c hi·ªán' in df_unique['K·ª≥'].unique():
            df_latest = df_unique[df_unique['K·ª≥'] == 'Th·ª±c hi·ªán']
            pie_data = df_latest["Ng∆∞·ª°ng t·ªïn th·∫•t"].value_counts().reindex(pivot_df.index, fill_value=0)
        elif not df_unique.empty and not pivot_df.empty:
            # Fallback to the first available period if 'Th·ª±c hi·ªán' is not present
            first_col_data = pivot_df.iloc[:, 0]
            if first_col_data.sum() > 0:
                pie_data = first_col_data

        if pie_data.sum() > 0:
            wedges, texts, autotexts = ax_pie.pie(
                pie_data,
                labels=pivot_df.index,
                autopct='%1.1f%%',
                startangle=90,
                colors=colors,
                pctdistance=0.75,
                wedgeprops={'width': 0.3, 'edgecolor': 'w'}
            )

            for text in texts:
                text.set_fontsize(4)
                text.set_fontweight('bold')
            for autotext in autotexts:
                autotext.set_color('black')
                autotext.set_fontsize(4)
                autotext.set_fontweight('bold')

            ax_pie.text(0, 0, f"T·ªïng s·ªë TBA\\n{pie_data.sum()}", ha='center', va='center', fontsize=5, fontweight='bold', color='black')
            ax_pie.set_title("T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t", fontsize=6, weight='bold')
        else:
            ax_pie.text(0.5, 0.5, "Kh√¥ng c√≥ d·ªØ li·ªáu t·ª∑ tr·ªçng ph√π h·ª£p", horizontalalignment='center', verticalalignment='center', transform=ax_pie.transAxes, fontsize=6)
            ax_pie.set_title("T·ª∑ tr·ªçng TBA theo ng∆∞·ª°ng t·ªïn th·∫•t", fontsize=6, weight='bold')


        st.pyplot(fig)

        # --- Danh s√°ch chi ti·∫øt TBA ---
        nguong_filter = st.selectbox("Ch·ªçn ng∆∞·ª°ng ƒë·ªÉ l·ªçc danh s√°ch TBA", ["(All)", "<2%", ">=2 v√† <3%", ">=3 v√† <4%", ">=4 v√† <5%", ">=5 v√† <7%", ">=7%"], key="tba_detail_filter")
        if nguong_filter != "(All)":
            df_filtered = df[df["Ng∆∞·ª°ng t·ªïn th·∫•t"] == nguong_filter]
        else:
            df_filtered = df

        st.markdown("### üìã Danh s√°ch chi ti·∫øt TBA")
        st.dataframe(df_filtered.reset_index(drop=True), use_container_width=True)

    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì. Vui l√≤ng ki·ªÉm tra c√°c file Excel tr√™n Google Drive v√† ƒë·ªãnh d·∫°ng c·ªßa ch√∫ng (c·∫ßn c·ªôt 'T·ª∑ l·ªá t·ªïn th·∫•t').")



with st.expander("‚ö° T·ªïn th·∫•t h·∫° th·∫ø"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t h·∫° th·∫ø")

    FOLDER_ID_HA = '1_rAY5T-unRyw20YwMgKuG1C0y7oq6GkK'

    @st.cache_data
    def list_excel_files_ha():
        service = get_drive_service()
        if not service:
            return {}
        query = f"'{FOLDER_ID_HA}' in parents and mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
        try:
            results = service.files().list(q=query, fields="files(id, name)").execute()
            return {f['name']: f['id'] for f in results.get('files', [])}
        except Exception as e:
            st.error(f"L·ªói li·ªát k√™ file h·∫° th·∫ø: {e}")
            return {}

    all_files_ha = list_excel_files_ha()
    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0, key="ha_nam")
    thang = st.selectbox("Ch·ªçn th√°ng", list(range(1, 13)), index=0, key="ha_thang")

    df_list = []
    df_list_ck = []
    df_list_kh = []

    for i in range(1, thang + 1):
        fname = f"HA_{nam}_{i:02}.xlsx"
        fname_ck = f"HA_{nam - 1}_{i:02}.xlsx"
        file_id = all_files_ha.get(fname)
        file_id_ck = all_files_ha.get(fname_ck)

        if file_id:
            df = download_excel(file_id)
            if not df.empty and df.shape[0] >= 1:
                try:
                    ty_le_th = float(str(df.iloc[0, 4]).replace(",", "."))  # Th·ª±c hi·ªán (c·ªôt E)
                    ty_le_ck = float(str(df.iloc[0, 5]).replace(",", ".")) if df.shape[1] >= 6 else None  # C√πng k·ª≥ (c·ªôt F n·∫øu c√≥)
                    ty_le_kh = float(str(df.iloc[0, 6]).replace(",", ".")) if df.shape[1] >= 7 else None  # K·∫ø ho·∫°ch (c·ªôt G n·∫øu c√≥)

                    df_list.append({"Th√°ng": i, "T·ª∑ l·ªá": ty_le_th})
                    if ty_le_ck is not None:
                        df_list_ck.append({"Th√°ng": i, "T·ª∑ l·ªá": ty_le_ck})
                    if ty_le_kh is not None:
                        df_list_kh.append({"Th√°ng": i, "T·ª∑ l·ªá": ty_le_kh})
                except:
                    st.warning(f"L·ªói ƒë·ªçc d·ªØ li·ªáu file: {fname}")

    df_th = pd.DataFrame(df_list).sort_values("Th√°ng")
    df_ck = pd.DataFrame(df_list_ck).sort_values("Th√°ng") if df_list_ck else pd.DataFrame()
    df_kh = pd.DataFrame(df_list_kh).sort_values("Th√°ng") if df_list_kh else pd.DataFrame()

    if not df_th.empty:
        fig, ax = plt.subplots(figsize=(6, 3), dpi=150)

        ax.plot(df_th["Th√°ng"], df_th["T·ª∑ l·ªá"], marker='o', color='blue', label='Th·ª±c hi·ªán', linewidth=1)
        if not df_ck.empty:
            ax.plot(df_ck["Th√°ng"], df_ck["T·ª∑ l·ªá"], marker='o', color='orange', label='C√πng k·ª≥', linewidth=1)
        if not df_kh.empty:
            ax.plot(df_kh["Th√°ng"], df_kh["T·ª∑ l·ªá"], marker='o', color='gray', label='K·∫ø ho·∫°ch', linewidth=1)

        for i, v in enumerate(df_th["T·ª∑ l·ªá"]):
            ax.text(df_th["Th√°ng"].iloc[i], v + 0.05, f"{v:.2f}", ha='center', fontsize=6, color='black')

        ax.set_ylabel("T·ª∑ l·ªá (%)", fontsize=8, color='black')
        ax.set_xlabel("Th√°ng", fontsize=8, color='black')
        ax.tick_params(axis='both', colors='black', labelsize=6)
        ax.grid(True, linestyle='--', linewidth=0.5)
        ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t h·∫° th·∫ø", fontsize=10, color='black')
        ax.legend(fontsize=6)

        st.pyplot(fig)
        st.dataframe(df_th)

    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã.")
with st.expander("‚ö° T·ªïn th·∫•t trung th·∫ø (TBA Trung th·∫ø)"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu TBA Trung √°p (Trung th·∫ø)")
    st.info("N·ªôi dung ph√¢n t√≠ch m·ªõi cho TBA Trung th·∫ø s·∫Ω ƒë∆∞·ª£c vi·∫øt t·∫°i ƒë√¢y.")
    if st.session_state.df_trung_thang_tt is not None:
        st.dataframe(st.session_state.df_trung_thang_tt)
    else:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu TBA Trung √°p (Trung th·∫ø) ƒë·ªÉ hi·ªÉn th·ªã.")


with st.expander("‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø")
    st.info("N·ªôi dung ph√¢n t√≠ch m·ªõi cho ƒë∆∞·ªùng d√¢y trung th·∫ø s·∫Ω ƒë∆∞·ª£c vi·∫øt t·∫°i ƒë√¢y.")
    if st.session_state.df_trung_thang_dy is not None:
        st.dataframe(st.session_state.df_trung_thang_dy)
    else:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø ƒë·ªÉ hi·ªÉn th·ªã.")


with st.expander("üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã")
    st.info("N·ªôi dung ph√¢n t√≠ch m·ªõi cho to√†n ƒë∆°n v·ªã s·∫Ω ƒë∆∞·ª£c vi·∫øt t·∫°i ƒë√¢y.")
    if st.session_state.df_dv_thang is not None:
        st.dataframe(st.session_state.df_dv_thang)
    else:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã ƒë·ªÉ hi·ªÉn th·ªã.")