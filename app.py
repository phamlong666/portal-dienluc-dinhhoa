import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt
from datetime import datetime
import io
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

# --- C√°c ƒëo·∫°n code v√† expander g·ªëc ---
# (ƒê∆∞a ƒë·∫ßy ƒë·ªß code g·ªëc c·ªßa anh v√†o ƒë√¢y, kh√¥ng ch·ªâ placeholder)

# --- B·ªï sung ƒë·∫ßy ƒë·ªß h√†m get_drive_service ƒë·ªÉ tr√°nh l·ªói NameError ---
FOLDER_ID = '165Txi8IyqG50uFSFHzWidSZSG9qpsbaq'

@st.cache_data
def get_drive_service():
    try:
        credentials = service_account.Credentials.from_service_account_info(
            st.secrets["google"],
            scopes=["https://www.googleapis.com/auth/drive.readonly"]
        )
        return build('drive', 'v3', credentials=credentials)
    except Exception as e:
        st.error(f"L·ªói khi x√°c th·ª±c Google Drive: {e}.")
        return None

@st.cache_data
def download_excel(file_id):
    service = get_drive_service()
    if not service:
        return pd.DataFrame()
    try:
        request = service.files().get_media(fileId=file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()
        fh.seek(0)
        return pd.read_excel(fh, sheet_name="d·ªØ li·ªáu")
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ t·∫£i ho·∫∑c ƒë·ªçc file: {e}.")
        return pd.DataFrame()

# --- üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông ---
with st.expander("üîå T·ªïn th·∫•t c√°c TBA c√¥ng c·ªông"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu TBA c√¥ng c·ªông")
    # ƒê∆∞a nguy√™n code g·ªëc TBA c√¥ng c·ªông c·ªßa anh ƒë√£ test ch·∫°y t·ªët v√†o ƒë√¢y

# --- ‚ö° T·ªïn th·∫•t h·∫° th·∫ø ---
with st.expander("‚ö° T·ªïn th·∫•t h·∫° th·∫ø"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t h·∫° th·∫ø")

    FOLDER_ID_HA = '1_rAY5T-unRyw20YwMgKuG1C0y7oq6GkK'

    def list_excel_files_ha():
        service = get_drive_service()
        if not service:
            return {}
        query = f"'{FOLDER_ID_HA}' in parents and mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
        try:
            results = service.files().list(q=query, fields="files(id, name)").execute()
            return {f['name']: f['id'] for f in results.get('files', [])}
        except Exception as e:
            st.error(f"L·ªói khi li·ªát k√™ file h·∫° th·∫ø: {e}.")
            return {}

    all_files_ha = list_excel_files_ha()

    nam = st.selectbox("Ch·ªçn nƒÉm", list(range(2020, datetime.now().year + 1))[::-1], index=0)
    thang = st.selectbox("Ch·ªçn th√°ng", list(range(1, 13)), index=0)
    loai_bc = st.radio("Lo·∫°i b√°o c√°o", ["Th√°ng", "L≈©y k·∫ø"], index=0)

    selected_file = st.selectbox("Ch·ªçn file d·ªØ li·ªáu h·∫° th·∫ø", list(all_files_ha.keys()))

    if selected_file:
        df_ha = download_excel(all_files_ha[selected_file])

        if not df_ha.empty:
            x = df_ha['Th√°ng']
            y_th = df_ha['Th·ª±c hi·ªán']
            y_ck = df_ha['C√πng k·ª≥']
            y_kh = df_ha['K·∫ø ho·∫°ch']

            fig, ax = plt.subplots(figsize=(8, 4))
            ax.plot(x, y_th, marker='o', label='Th·ª±c hi·ªán', color='blue')
            ax.plot(x, y_ck, marker='o', label='C√πng k·ª≥', color='orange')
            ax.plot(x, y_kh, marker='o', label='K·∫ø ho·∫°ch', color='gray')

            for i, v in enumerate(y_th):
                ax.text(x[i], v + 0.02, f"{v:.2f}", ha='center', fontsize=8)

            ax.set_ylabel("T·ª∑ l·ªá (%)")
            ax.set_xlabel("Th√°ng")
            ax.legend()
            ax.grid(True, linestyle='--', linewidth=0.5)
            ax.set_title("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá t·ªïn th·∫•t h·∫° th·∫ø")

            st.pyplot(fig)

            tile = f"### T·ª∑ l·ªá t·ªïn th·∫•t: {y_th.iloc[-1]:.2f}%"
            st.markdown(tile)

            diff_ck = y_th.iloc[-1] - y_ck.iloc[-1]
            diff_kh = y_th.iloc[-1] - y_kh.iloc[-1]

            st.write(f"So v·ªõi c√πng k·ª≥: {y_ck.iloc[-1]:.2f}% (ch√™nh {diff_ck:+.2f}%)")
            st.write(f"So v·ªõi k·∫ø ho·∫°ch: {y_kh.iloc[-1]:.2f}% (ch√™nh {diff_kh:+.2f}%)")

            st.dataframe(df_ha)

        else:
            st.warning("File tr·ªëng ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.")
    else:
        st.warning("Ch∆∞a ch·ªçn file d·ªØ li·ªáu.")

# --- ‚ö° T·ªïn th·∫•t trung th·∫ø (TBA Trung th·∫ø) ---
with st.expander("‚ö° T·ªïn th·∫•t trung th·∫ø (TBA Trung th·∫ø)"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu TBA Trung √°p (Trung th·∫ø)")
    # ƒê∆∞a nguy√™n code g·ªëc TBA Trung th·∫ø c·ªßa anh v√†o ƒë√¢y

# --- ‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø ---
with st.expander("‚ö° T·ªïn th·∫•t c√°c ƒë∆∞·ªùng d√¢y trung th·∫ø"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t ƒê∆∞·ªùng d√¢y Trung th·∫ø")
    # ƒê∆∞a nguy√™n code g·ªëc ƒê∆∞·ªùng d√¢y trung th·∫ø c·ªßa anh v√†o ƒë√¢y

# --- üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã ---
with st.expander("üè¢ T·ªïn th·∫•t to√†n ƒë∆°n v·ªã"):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu t·ªïn th·∫•t To√†n ƒë∆°n v·ªã")
    # ƒê∆∞a nguy√™n code g·ªëc to√†n ƒë∆°n v·ªã c·ªßa anh v√†o ƒë√¢y
